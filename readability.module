<?php
// $Id$

/**
 * @file
 * Adds a Read: Now | Later button for nodes
 */

/**
 * Implements hook_init().
 */
function readability_init() {
  if (variable_get('readability_verify_domain', 0)) {
    drupal_set_html_head(variable_get('readability_verification'));
  }
}

/**
 * Implements hook_perm().
 */
function readability_perm() {
  return array('administer readability', 'access readability button');
}

/**
 * Implements hook_menu().
 */
function readability_menu() {
  $items = array();
  $items['admin/settings/readability'] = array(
    'title' => 'Readability Button',
    'description' => 'Configure the look and behavior of the Readability Button on the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('readability_admin_settings'),
    'access arguments' => array('administer readability'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_theme()
 */
function readability_theme() {
  return array(
    'readability_display' => array(
      'variables' => array('object' => NULL, 'options' => array()),
    ),
  );
}

/**
 * Implements hook_nodeapi().
 */
function readability_nodeapi(&$node, $op) {
  switch ($op) {
    case 'view':
      $enable_readability = variable_get('readability_button_enable_' . $node->type, 0);
      if ($enable_readability && (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) && user_access('access readability button')) {
        $node->content['readability'] = array(
          '#weight' => variable_get('readability_button_weight_' . $node->type, 0),
          '#value' => theme('readability_display'),
      );
      break;
    }
  }
}

function theme_readability_display($variables) {
  $readability = "<div id='rdbWrapper'></div><script type='text/javascript'>
  (function() {
      var s     = document.getElementsByTagName('script')[0],
          rdb   = document.createElement('script');
      rdb.type  = 'text/javascript';
      rdb.async = true;
      rdb.src   = document.location.protocol + '//www.readability.com/embed.js';
      s.parentNode.insertBefore(rdb, s);
  })();
  </script>";
  return $readability; 
}

/**
 * General configuration form for the Readability button
 */
function readability_admin_settings() {
  $form = array();
  $form['verification'] = array(
    '#type' => 'fieldset',
    '#title' => t('Readability site verifcation'),
  );
  $form['verification']['readability_verification'] = array(
    '#title' => t('Verification code'),
    '#description' => t('Copy the code from http://www.readability.com/ under domain validation, which should be in the format of &lt;meta name="readability-verification" content="[VERIFICATION CODE]"/&gt;'),
    '#type' => 'textfield',
    '#default_value' => variable_get('readability_verification', '<meta name="readability-verification" content="[VERIFICATION CODE]"/>'),
    '#size' => 75,
    '#max_length' => 255,
  );
  $form['verification']['readability_verify_domain'] = array(
    '#type' => 'checkbox',
    '#title' => t('Verify domain?'),
    '#description' => t("Check this box if you wish the verification code to appear in your site's HTML header"),
    '#default_value' => variable_get('readability_verify_domain', 0),
  );
  return system_settings_form($form);
}

function readability_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form') {
    $form['readability'] = array(
      '#type' => 'fieldset',
      '#title' => 'Readability settings',
      '#weight' => 25,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['readability']['button'] = array(
        '#type' => 'fieldset',
        '#title' => 'Readability button settings',
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
        '#weight' => 1,
        '#group' => 'readability',
    );
    $form['readability']['button']['readability_button_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable readability button'),
      '#default_value' => variable_get('readability_button_enable_' . $form['#node_type']->type, 0),
      '#description' => t('Check this box to enable the Readability button for this node type.'),    
    );
    $form['readability']['button']['readability_button_weight'] = array(
      '#type' => 'select',
      '#default_value' => variable_get('readability_button_weight_' . $form['#node_type']->type, 0),
      '#options' => drupal_map_assoc(range(-10, 10)),
    );
  }
}