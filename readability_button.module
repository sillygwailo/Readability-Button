<?php
// $Id$

/**
 * @file
 * Adds a Read: Now | Later button for nodes
 */

/**
 * Implements hook_init().
 */
function readability_button_init() {
  if (variable_get('readability_button_verify_domain', 0)) {
    drupal_set_html_head(variable_get('readability_button_erification', ''));
  }
}

/**
 * Implements hook_perm().
 */
function readability_button_perm() {
  return array('administer readability', 'access readability button');
}

/**
 * Implements hook_menu().
 */
function readability_button_menu() {
  $items = array();
  $items['admin/settings/readability_button'] = array(
    'title' => 'Readability Button',
    'description' => 'Configure the look and behavior of the Readability button on the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('readability_button_admin_settings'),
    'access arguments' => array('administer readability'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_theme()
 */
function readability_button_theme() {
  return array(
    'readability_button_display' => array(
      'variables' => array('object' => NULL, 'options' => array()),
    ),
  );
}

/**
 * Implements hook_nodeapi().
 */
function readability_button_nodeapi(&$node, $op) {
  switch ($op) {
    case 'view':
      $enable_readability = variable_get('readability_button_enable_' . $node->type, 0);
      if ($enable_readability && (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) && user_access('access readability button')) {
        $node->content['readability'] = array(
          '#weight' => variable_get('readability_button_weight_' . $node->type, 0),
          '#value' => theme('readability_button_display', $node->type),
      );
      break;
    }
  }
}

function theme_readability_button_display($node_type) {
  $enable_readability_kindle = variable_get('readability_button_kindle_enable_' . $node_type, 0);
  if ($enable_readability_kindle) {
    $readability = "<div class='rdbWrapper' data-show-send-to-kindle='1' data-show-read='1'></div> ";
  }
  else {
    $readability = "<div class='rdbWrapper'></div>";    
  }
 
  $readability .= "<script type='text/javascript'>
      (function() {
      var s     = document.getElementsByTagName('script')[0],
          rdb   = document.createElement('script');
      rdb.type  = 'text/javascript';
      rdb.async = true;
      rdb.src   = document.location.protocol + '//www.readability.com/embed.js';
      s.parentNode.insertBefore(rdb, s);
      })();
  </script>";
  return $readability; 
}

/**
 * General configuration form for the Readability button
 */
function readability_button_admin_settings() {
  $form = array();
  $form['verification'] = array(
    '#type' => 'fieldset',
    '#title' => t('Readability site verifcation'),
  );
  $form['verification']['readability_button_verification'] = array(
    '#title' => t('Verification code'),
    '#description' => t('Copy the code from http://www.readability.com/ under domain validation, which should be in the format of &lt;meta name="readability-verification" content="[VERIFICATION CODE]"/&gt;'),
    '#type' => 'textfield',
    '#default_value' => variable_get('readability_button_verification', '<meta name="readability-verification" content="[VERIFICATION CODE]"/>'),
    '#size' => 75,
    '#max_length' => 255,
  );
  $form['verification']['readability_button_verify_domain'] = array(
    '#type' => 'checkbox',
    '#title' => t('Verify domain?'),
    '#description' => t("Check this box if you wish the verification code to appear in your site's HTML header"),
    '#default_value' => variable_get('readability_button_verify_domain', 0),
  );
  return system_settings_form($form);
}

function readability_button_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form') {
    $form['readability'] = array(
      '#type' => 'fieldset',
      '#title' => t('Readability settings'),
      '#weight' => 25,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['readability']['button'] = array(
        '#type' => 'fieldset',
        '#title' => t('Readability button settings'),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
        '#weight' => 1,
        '#group' => 'readability',
    );
    $form['readability']['button']['readability_button_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Readability button'),
      '#default_value' => variable_get('readability_button_enable_' . $form['#node_type']->type, 0),
      '#description' => t('Check this box to enable the Read Now | Later button for this content type.'),    
    );
    $form['readability']['button']['readability_button_kindle_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Readability "Send to Kindle" button'),
      '#default_value' => variable_get('readability_button_kindle_enable_' . $form['#node_type']->type, 0),
      '#description' => t('Check this box to enable the "Send to Kindle" button for this content type.'),    
    );
    $form['readability']['button']['readability_button_weight'] = array(
      '#type' => 'select',
      '#default_value' => variable_get('readability_button_weight_' . $form['#node_type']->type, 0),
      '#options' => drupal_map_assoc(range(-10, 10)),
    );
  }
}