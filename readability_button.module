<?php
// $Id$

/**
 * @file
 * Adds a Read: Now | Later button for nodes
 */

/**
 * Implements hook_init().
 */
function readability_button_init() {
  if (variable_get('readability_button_verify_domain', 0)) {
    $verification = array(
      '#type' => 'markup',
      '#markup' => variable_get('readability_button_verification'),
    );
    drupal_add_html_head($verification, 'readability_button_verification');
  }
}

/**
 * Implements hook_permission().
 */
function readability_button_permission() {
  return array(
    'administer readability' =>  array(
      'title' => t('Administer Readability settings'),
      'description' => t('Change the weight and node types on which the button appears'),
    ),
    'access readability button' => array(
      'title' => t('Access Readability button'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function readability_button_menu() {
  $items = array();
  $items['admin/config/services/readability'] = array(
    'title' => 'Readability Button',
    'description' => 'Configure the look and behavior of the Readability Button on the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('readability_button_admin_settings'),
    'access arguments' => array('administer readability'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_theme()
 */
function readability_button_theme() {
  return array(
    'readability_button_display' => array(
      'variables' => array('object' => NULL, 'options' => array()),
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function readability_button_node_view($node, $view_mode, $langcode) {
  $enable_readability = variable_get('readability_button_enable_' . $node->type, 0);
  if ($enable_readability && $view_mode == 'full' && user_access('access readability button')) {
    $node->content['readability'] = array(
      '#object' => $node,
      '#weight' => variable_get('readability_button_weight_' . $node->type, 0),
      '#theme' => 'readability_button_display__' . $node->type,
    );
  }
}

function theme_readability_button_display($variables) {
  $node_type = $variables['object']->type;
  $enable_readability_kindle = variable_get('readability_button_kindle_enable_' . $node_type, 0);
  if ($enable_readability_kindle) {
    $readability = "<div class='rdbWrapper' data-show-send-to-kindle='1' data-show-read='1'></div> ";
  }
  else {
    $readability = "<div class='rdbWrapper'></div>";    
  }

  $readability .= "<script type='text/javascript'>
      (function() {
      var s     = document.getElementsByTagName('script')[0],
          rdb   = document.createElement('script');
      rdb.type  = 'text/javascript';
      rdb.async = true;
      rdb.src   = document.location.protocol + '//www.readability.com/embed.js';
      s.parentNode.insertBefore(rdb, s);
      })();
  </script>";
  return $readability; 
}

/**
 * General configuration form for the Readability button
 */
function readability_button_admin_settings() {
  $form = array();
  $form['verification'] = array(
    '#type' => 'fieldset',
    '#title' => t('Readability site verifcation'),
  );
  $form['verification']['readability_button_verification'] = array(
    '#title' => t('Verification code'),
    '#description' => t('Copy the code from http://www.readability.com/ under domain validation, which should be in the format of &lt;meta name="readability-verification" content="[VERIFICATION CODE]"/&gt;'),
    '#type' => 'textfield',
    '#default_value' => variable_get('readability_button_verification', '<meta name="readability-verification" content="[VERIFICATION CODE]"/>'),
    '#size' => 125,
    '#max_length' => 255,
  );
  $form['verification']['readability_button_verify_domain'] = array(
    '#type' => 'checkbox',
    '#title' => t('Verify domain?'),
    '#description' => t("Check this box if you wish the verification code to appear in your site's HTML header"),
    '#default_value' => variable_get('readability_button_verify_domain', 0),
  );
  return system_settings_form($form);
}

function readability_button_form_node_type_form_alter(&$form, $form_state) {
  $form['readability'] = array(
    '#type' => 'fieldset',
    '#title' => t('Readability settings'),
    '#weight' => 25,
    '#group' => 'additional_settings',
  );
  $form['readability']['button'] = array(
      '#type' => 'fieldset',
      '#title' => t('Readability button settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 1,
      '#group' => 'readability',
  );
  $form['readability']['button']['readability_button_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Readability button'),
    '#default_value' => variable_get('readability_button_enable_' . $form['#node_type']->type, 0),
    '#description' => t('Check this box to enable the Read Now | Later button for this content type.'),    
  );
  $form['readability']['button']['readability_button_kindle_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Readability "Send to Kindle" button'),
    '#default_value' => variable_get('readability_button_kindle_enable_' . $form['#node_type']->type, 0),
    '#description' => t('Check this box to enable the "Send to Kindle" button for this content type.'),    
  );
  $form['readability']['button']['readability_button_weight'] = array(
    '#type' => 'select',
    '#default_value' => variable_get('readability_button_weight_' . $form['#node_type']->type, 0),
    '#options' => drupal_map_assoc(range(-10, 10)),
  );
}